// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using zms.Persistence.SqlServer.EF.SmsService.Context;

#nullable disable

namespace zms.Persistence.SqlServer.EF.SmsService.Migrations
{
    [DbContext(typeof(SmsServiceContext))]
    partial class SmsServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("MessageHiLo");

            modelBuilder.Entity("zms.Generic.SmsService.Domain.OfMessage.Message", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("Первичный ключ");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Комментарий");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата создания");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Внешний идентификатор");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата обработки");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Имя отправителя");

                    b.Property<DateTime?>("SendingDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата отправки");

                    b.Property<int>("SmsCount")
                        .HasColumnType("int")
                        .HasComment("Количество потраченных СМС на сообщение");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Тема сообщения");

                    b.HasKey("Id");

                    b.ToTable("Message", null, t =>
                        {
                            t.HasComment("Таблица СМС сообщений");
                        });
                });

            modelBuilder.Entity("zms.Generic.SmsService.Domain.OfMessage.Message", b =>
                {
                    b.OwnsOne("zms.Generic.SmsService.Domain.OfMessage.Category", "Category", b1 =>
                        {
                            b1.Property<long>("MessageId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasComment("Наименование категории сообщения");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasComment("Код категории сообщения");

                            b1.HasKey("MessageId");

                            b1.ToTable("Message");

                            b1.WithOwner()
                                .HasForeignKey("MessageId");
                        });

                    b.OwnsOne("zms.Generic.SmsService.Domain.OfMessage.Provider", "Provider", b1 =>
                        {
                            b1.Property<long>("MessageId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasComment("Наименование провайдера отправки");

                            b1.HasKey("MessageId");

                            b1.ToTable("Message");

                            b1.WithOwner()
                                .HasForeignKey("MessageId");
                        });

                    b.OwnsOne("zms.Generic.SmsService.Domain.OfMessage.Recipient", "Recipient", b1 =>
                        {
                            b1.Property<long>("MessageId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasComment("Имя получателя");

                            b1.HasKey("MessageId");

                            b1.ToTable("Message");

                            b1.WithOwner()
                                .HasForeignKey("MessageId");

                            b1.OwnsOne("zms.Common.SharedKernel.Common.Contact.PhoneNumber", "Phone", b2 =>
                                {
                                    b2.Property<long>("RecipientMessageId")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasComment("Номер телефона");

                                    b2.HasKey("RecipientMessageId");

                                    b2.ToTable("Message");

                                    b2.WithOwner()
                                        .HasForeignKey("RecipientMessageId");
                                });

                            b1.Navigation("Phone")
                                .IsRequired();
                        });

                    b.OwnsOne("zms.Generic.SmsService.Domain.OfMessage.Status", "Status", b1 =>
                        {
                            b1.Property<long>("MessageId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasComment("Наименование статуса");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasComment("Код статуса");

                            b1.HasKey("MessageId");

                            b1.ToTable("Message");

                            b1.WithOwner()
                                .HasForeignKey("MessageId");
                        });

                    b.OwnsOne("zms.Generic.SmsService.Domain.OfMessage.TimeInterval", "SendingPeriod", b1 =>
                        {
                            b1.Property<long>("MessageId")
                                .HasColumnType("bigint");

                            b1.Property<TimeSpan>("TimeEnd")
                                .HasColumnType("time")
                                .HasComment("Начало периода времени отправки");

                            b1.Property<TimeSpan>("TimeStart")
                                .HasColumnType("time")
                                .HasComment("Начало периода времени отправки");

                            b1.HasKey("MessageId");

                            b1.ToTable("Message");

                            b1.WithOwner()
                                .HasForeignKey("MessageId");
                        });

                    b.Navigation("Category")
                        .IsRequired();

                    b.Navigation("Provider")
                        .IsRequired();

                    b.Navigation("Recipient")
                        .IsRequired();

                    b.Navigation("SendingPeriod")
                        .IsRequired();

                    b.Navigation("Status")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
